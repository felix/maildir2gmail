#! /usr/bin/ruby

##
# rememeber: 
#   - insert your login and password at Line 100, and save this file.
#   - of couse, be very carefull if you send this to a friend... REMOVE your credentials first!
#   - if you are using Google Hosted for your Domain (Google Apps), your_login is something like: me@mydomain.com
#   - example: go = GoGmail.new($*[0], 'imap.gmail.com', 993, $*[1], 'tree@forest.org', 'littlebird', $*[2])
#
# usage:
#   $ chmod u+x 2gmail.rb
#   $ ./2gmail.rb MBOX_FILE GMAIL_FOLDER [STARTING_MESSAGE]
#
#   examples:
#     $ ./2gmail.rb Inbox tempInbox 250
#     $ ruby 2gmail.rb Inbox tempInbox 250
#     $ /path/to/ruby/ruby 2gmail.rb Inbox tempInbox 250
#
# notice:
#   - who: pedro.mota@gmail.com <- say something...
#   - when: 03-dec-2007
#   - what: this is free software. use. refactor. share.
#   - the author will not be responsible for any bumps during the journey! This was done in some minutes!
#

require 'mailread'
require 'net/imap'
require 'optparse'
require 'time'

class Maildir
  def initialize(path, verbose)
    @path = path
    @verbose = verbose
    if File.stat(path).directory?
      @entries = Dir.glob("#{File.join(path,'cur')}/*")
      @entries.concat(Dir.glob("#{File.join(path,'new')}/*")).compact!
      puts "Queued #{@entries.size} emails for processing"
    else
      puts "No emails found"
    end
  end

  def wrap_msg(data)
    fmt_msg = ""
    # headers
    fmt_msg = data.header.collect { |h| "#{h[0]}: #{h[1].gsub(/\n/, "")}\r\n" }.to_s
    # and body (body separated by \r\n\r\n)
    fmt_msg += "\r\n"
    fmt_msg += "#{data.body.to_s.gsub(/\n/, "\r\n")}" 
  end

  def get_message
    file = @entries.pop
    return nil unless file
    package = {:flags => []}
    flags = file.slice(file.rindex(':2,')+3..-1)
    if flags
      flags.include?('S') ? package[:flags].push(:Seen) : nil
      flags.include?('F') ? package[:flags].push(:Flagged) : nil
      flags.include?('R') ? package[:flags].push(:Answered) : nil
      flags.include?('D') ? package[:flags].push(:Draft) : nil
      flags.include?('T') ? package[:flags].push(:Deleted) : nil
    end
    data = Mail.new(file)
    package[:message] = wrap_msg(data)
    package[:date] = Time.parse(data.header["Date"])
    package[:subject] = data.header["Subject"]
    package
  end
end

class Gmail

  def initialize(mailbox, options)
    # open the mbox file
    @maildir = Maildir.new(mailbox,options['verbose'])
    # open the gmail imap account
    @imap = Net::IMAP.new(options['server'], options['port'], true, nil, false)
    @imap.login(options['user'], options['pass'])
    @verbose = options['verbose']

    @folder = options['folder']
    if options['base']
      @folder = File.join(base,options['folder'])
    end
    puts "Using IMAP folder #{@folder}"

    begin
      @imap.select(@folder)
    rescue 
      @imap.create(@folder)
      # todo: code the possibility of a Net::IMAP::NoResponseError
    end

    # read in cache

  end

  def upload
    uploaded,skipped,errors = 0,0,0
    begin
      while message = @maildir.get_message
        begin
          @imap.append(@folder, message[:message], message[:flags], message[:date])
          # TODO record file in db
          puts "Sent: #{message[:date]} : #{message[:message].size} : #{message[:flags].inspect} : #{message[:subject].gsub(/\n/,'').slice(0..15)}..." if @verbose
          uploaded += 1
        rescue => e
          puts "Error in message #{message[:subject]} : #{message[:date]}" if @verbose
          puts "Error: #{e}" if @verbose
          errors += 1
          next
        end
      end
      puts "Upload finished: #{uploaded} uploaded : #{skipped} skipped : #{errors} errors"
    rescue => e
      puts "An error occurred: #{e}" if @verbose
    ensure
      @imap.disconnect
    end
  end
end

help = <<HELP
2gmail is a tool to migrate a local Maildir to a Gmail account.

HELP

options = {
  'folder' => 'INBOX',
  'server' => 'imap.gmail.com',
  'port' => '993',
  'base' => nil,
  'verbose' => false
}
opts = OptionParser.new do |opts|
  opts.banner = help
  opts.on("--server [SERVER]", "Gmail's IMAP server, default is 'imap.gmail.com'") do |server|
    options['server'] = server unless server.nil?
  end

  opts.on("--port [PORT]", "IMAP server port, default is 993") do |port|
    options['port'] = port unless port.nil?
  end

  opts.on("--user [USERNAME]", "Your Gmail username") do |user|
    options['user'] = user
    raise ARgumentError if options['user'].nil?
  end

  opts.on("--pass [PASSWORD]", "Your Gmail password") do |pass|
    options['pass'] = pass
    raise ArgumentError if options['pass'].nil?
  end

  opts.on("--folder [FOLDER]", "Remote folder to append to or create, default 'INBOX'") do |folder|
    options['folder'] = folder unless folder.nil?
  end

  opts.on("--base [FOLDER]", "Remote base name, default is ''") do |base|
    options['base'] = base unless base.nil?
  end

  opts.on("--verbose", "Be noisy") do |verbose|
    options['verbose'] = true
  end
end

opts.parse!

case ARGV.size
when 1
  path = ARGV[0]
else
  puts "Need to specify a path"
  exit(1)
end

go = Gmail.new(path, options)
go.upload
